#ifndef HISI_SOC_ITS_PARA_H_
#define HISI_SOC_ITS_PARA_H_ 
#include <soc_acpu_coresight_baseaddr_interface.h>
#define COEFFICIENT_SIZE 40
#define VOTE_RESULT_ADDR 0x2DC
#define C0_BIT 8
#define C1_BIT 24
#define C2_BIT 0
#define CORE_NUMBER 8
#define C0_CORE_NUM 4
#define C1_CORE_NUM 2
#define C2_CORE_NUM 2
#define FREQIDX_UPPER_BOUND 16
#define ITS_OLD_FREQ_IDX_START 48
#define ITS_NEW_FREQ_IDX_START 32
#define ITS_USER_ID_START 16
#define ITS_CORE_INDEX_START 0
#define ITS_OLD_FREQ_START 32
#define ITS_NEW_FREQ_START 0
enum {
 USERID_DUBAI = 0,
 USERID_MAX,
};
enum {
 CLUSTER_0 = 0,
 CLUSTER_1,
 CLUSTER_2,
 CLUSTER_NUMBER
};
struct core_parameters {
 unsigned int addr;
 unsigned int cluster_idx;
};
typedef struct {
 unsigned long long power[CORE_NUMBER];
} its_cpu_power_t;
static struct core_parameters g_its_core_para[CORE_NUMBER] = {
 {SOC_ACPU_Coresight_FCM_LOCAL_ANANKE0_NS_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_Coresight_FCM_LOCAL_ANANKE1_NS_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_Coresight_FCM_LOCAL_ANANKE2_NS_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_Coresight_FCM_LOCAL_ANANKE3_NS_BASE_ADDR, CLUSTER_0},
 {SOC_ACPU_Coresight_FCM_LOCAL_ENYO0_NS_BASE_ADDR, CLUSTER_1},
 {SOC_ACPU_Coresight_FCM_LOCAL_ENYO1_NS_BASE_ADDR, CLUSTER_1},
 {SOC_ACPU_Coresight_FCM_LOCAL_ENYO2_NS_BASE_ADDR, CLUSTER_2},
 {SOC_ACPU_Coresight_FCM_LOCAL_ENYO3_NS_BASE_ADDR, CLUSTER_2}
};
static unsigned int g_cluster_para[CLUSTER_NUMBER][COEFFICIENT_SIZE] = {
 {
  0x0, 0x120E2A80, 0x19C, 0x231D02F6, 0x6380364,
  0x22652690, 0x4880000, 0x0, 0x217B22BC, 0x0,
  0x230901A7, 0x12252331, 0x1FF6, 0x7E0000, 0x6E,
  0x4FE0000, 0x860000, 0x0, 0x145D, 0x28A40000,
  0x90D0000, 0x1102, 0x0, 0x0, 0x0,
  0x0, 0xA50, 0x20530000, 0x0, 0x28B40364,
  0x1B800B3, 0x0, 0x17A800B0, 0x6940F3E, 0x9FA,
  0x0, 0x0, 0x0, 0x0, 0x0
 },
 {
  0x27CA00CA, 0xBE041A, 0x21B4, 0x5040000, 0x25A00000,
  0x0, 0x21610F0C, 0x717, 0x27C9023C, 0x6050000,
  0x1F242669, 0x1550144, 0xA8D22E7, 0x278C02EE, 0x65D25FC,
  0x847, 0x259A2201, 0x64B0498, 0x58D0E39, 0x54207FE,
  0x18D50577, 0x20DA0FD3, 0x0, 0x10352196, 0x233920C8,
  0x4BF28F3, 0x58000C5, 0x243A0000, 0x0, 0x20AB24BB,
  0x0, 0x8E01C5, 0x0, 0x21950000, 0x0,
  0x20BD0418, 0xA9B0ADC, 0x25F2115, 0xE9400DE, 0x31E
 },
 {
  0x28312B8, 0x1DA0115, 0x219D, 0x2CF00D5, 0x196F,
  0x27830000, 0x33271F9E, 0x499, 0x285, 0x3E3,
  0x18260297, 0x134, 0x2F5225C, 0x4A0, 0x540000,
  0xB5F, 0x24C40000, 0x54D0539, 0xA10A04, 0xCC052C,
  0x1B5, 0x60C46, 0x8B0000, 0xB282741, 0xB532C50,
  0x2EC25D0, 0x10B07AD, 0x2012526, 0x29FA0049, 0x0,
  0x0, 0x23C402A4, 0x23F2, 0x2AEB0000, 0x1210000,
  0x26060000, 0xFCD0D33, 0x49E21C5, 0xA3B004F, 0x6F0
 }
};
static unsigned int g_its_window_num[CLUSTER_NUMBER][FREQIDX_UPPER_BOUND] = {
 {
  0x2A44,
  0x419C,
  0x48EF,
  0x4F7F,
  0x560F,
  0x5D62,
  0x64B5,
  0x6A94,
  0x735A,
  0x7C34,
  0x855C,
  0x8DC0,
  0x9513,
  0xFFFF,
  0xFFFF,
  0xFFFF
 },
 {
  0x3F05,
  0x47CB,
  0x4F1E,
  0x5671,
  0x5F37,
  0x674E,
  0x6F02,
  0x7655,
  0x7DA8,
  0x84FB,
  0x8CB0,
  0x94B3,
  0x9CC9,
  0xA3BB,
  0xABD1,
  0xB40E
 },
 {
  0x75F3,
  0x7EB9,
  0x8906,
  0x92DE,
  0x9A92,
  0xA358,
  0xAABF,
  0xB1FE,
  0xBA15,
  0xC168,
  0xC8BB,
  0xD181,
  0xDA47,
  0xFFFF,
  0xFFFF,
  0xFFFF
 }
};
#endif
